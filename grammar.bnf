<program> ::= <multiline>
<block> ::= "{" <newline> <multiline> <newline> "}"
<multiline> ::= <stmt> | <stmt> <newline> <multiline>
<stmt> ::= <importStmt> | <varStmt> | <funCall> | <assignVar> | <ifStmt> | <ifElseStmt> | <ifElifStmt> | <ifElifElseStmt> | <classDecl> | <namespaceDecl> | <funDecl> | <forLoop> | <forEachLoop> | <whileLoop> | <doWhileLoop>
<ifStmt> ::= "if(" <expr> ")" <block> | "if(" <expr> ")" <newline> <block>
<ifElseStmt> ::= <ifStmt> "else" <block> | <ifStmt> <newline> "else" <block>
<ifElifStmt> ::= <ifStmt> "else if(" <expr> ")" <block> | <ifElifStmt> "else if(" <expr> ")" <block>
<ifElifElseStmt> ::= <ifElifStmt> "else" <block>
<forLoop> ::= "for(var " <alnum> "=" <expr> " to " <expr> " step " <expr> ")" <block> | "for(" <alnum> "=" <expr> " to " <expr> " step " <expr> ")" <block>
<forEachLoop> ::= "foreach(var " <alnum> ": " <expr> ")" <block>
<whileLoop> ::= "while(" <expr> ")" <block>
<doWhileLoop> ::= "dowhile(" <expr> ")" <block>
<funDecl> ::= "function " <alnum> "(" <commaSeperatedVars> ")" <block>
<classDecl> ::= "class " <alnum> <block> | "class " <alnum> " extends " <alnum> <block>
<namespaceDecl> ::= "namespace " <alnum> <block>
<commaSeperatedVars> ::= "var " <alnum> | "var " <alnum> "," <commaSeperatedVars>
<importStmt> ::= "import " <alnum> | "import std/" <alnum> ".plt" | "import \"" <path> "\""
<funCall> ::= <alnum> "(" <commaSepExpr> ")"
<assignVar> ::= <alnum> "=" <expr>
<commaSepExpr> ::= <expr> | <expr> "," <expr>
<path> ::= <alnum> | <alnum> "/" <alnum> | <alnum> "\\\\" <alnum> | <alnum> "/" <path> | <alnum> "\\\\" <path>
<varStmt> ::= "var " <alnum> "=" <expr>
<expr> ::= <constant> | <constant> <binary_op> <expr> | <unary_op> <expr> | "(" <expr> ")"
<binary_op> ::= "+" | "-" | "/" | "*" | "&" | "|" | "^" | "<<" | ">>" | "is" | "and" | "or" | "==" | "!=" | "<=" | ">=" | "<" | ">"
<unary_op> ::= "-" | "!" | "+" | "~"
<constant> ::= <integer> | <float>
<integer> ::= <number> 
<float> ::= <integer> "." <number>
<any> ::= [\x20-\x7E]
<alnum> ::= <al> | <al> <number> | <al> <number> <al>
<al> ::= <lower> | <upper> | <underscore> | <lower> <al> | <upper> <al> | <underscore> <al>
<lower> ::= [a-z]
<upper> ::= [A-Z]
<number> ::= <digit> | <digit> <number>
<digit> ::= [0-9]
<underscore> ::= "_"
<newline> ::= "\n" | "\n" <newline>
<S> ::= (" " | "\t")*